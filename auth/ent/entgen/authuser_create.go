// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"auth/ent/entgen/authprovider"
	"auth/ent/entgen/authuser"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthUserCreate is the builder for creating a AuthUser entity.
type AuthUserCreate struct {
	config
	mutation *AuthUserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (auc *AuthUserCreate) SetCreatedAt(t time.Time) *AuthUserCreate {
	auc.mutation.SetCreatedAt(t)
	return auc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableCreatedAt(t *time.Time) *AuthUserCreate {
	if t != nil {
		auc.SetCreatedAt(*t)
	}
	return auc
}

// SetUpdatedAt sets the "updated_at" field.
func (auc *AuthUserCreate) SetUpdatedAt(t time.Time) *AuthUserCreate {
	auc.mutation.SetUpdatedAt(t)
	return auc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableUpdatedAt(t *time.Time) *AuthUserCreate {
	if t != nil {
		auc.SetUpdatedAt(*t)
	}
	return auc
}

// SetDeletedAt sets the "deleted_at" field.
func (auc *AuthUserCreate) SetDeletedAt(t time.Time) *AuthUserCreate {
	auc.mutation.SetDeletedAt(t)
	return auc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableDeletedAt(t *time.Time) *AuthUserCreate {
	if t != nil {
		auc.SetDeletedAt(*t)
	}
	return auc
}

// SetCreatedBy sets the "created_by" field.
func (auc *AuthUserCreate) SetCreatedBy(s string) *AuthUserCreate {
	auc.mutation.SetCreatedBy(s)
	return auc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableCreatedBy(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetCreatedBy(*s)
	}
	return auc
}

// SetUpdatedBy sets the "updated_by" field.
func (auc *AuthUserCreate) SetUpdatedBy(s string) *AuthUserCreate {
	auc.mutation.SetUpdatedBy(s)
	return auc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableUpdatedBy(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetUpdatedBy(*s)
	}
	return auc
}

// SetDeletedBy sets the "deleted_by" field.
func (auc *AuthUserCreate) SetDeletedBy(s string) *AuthUserCreate {
	auc.mutation.SetDeletedBy(s)
	return auc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableDeletedBy(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetDeletedBy(*s)
	}
	return auc
}

// SetUserAgent sets the "user_agent" field.
func (auc *AuthUserCreate) SetUserAgent(s string) *AuthUserCreate {
	auc.mutation.SetUserAgent(s)
	return auc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableUserAgent(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetUserAgent(*s)
	}
	return auc
}

// SetIPAddress sets the "ip_address" field.
func (auc *AuthUserCreate) SetIPAddress(s string) *AuthUserCreate {
	auc.mutation.SetIPAddress(s)
	return auc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableIPAddress(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetIPAddress(*s)
	}
	return auc
}

// SetProviderID sets the "provider_id" field.
func (auc *AuthUserCreate) SetProviderID(i int) *AuthUserCreate {
	auc.mutation.SetProviderID(i)
	return auc
}

// SetProviderUserID sets the "provider_user_id" field.
func (auc *AuthUserCreate) SetProviderUserID(s string) *AuthUserCreate {
	auc.mutation.SetProviderUserID(s)
	return auc
}

// SetTeamID sets the "team_id" field.
func (auc *AuthUserCreate) SetTeamID(s string) *AuthUserCreate {
	auc.mutation.SetTeamID(s)
	return auc
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableTeamID(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetTeamID(*s)
	}
	return auc
}

// SetName sets the "name" field.
func (auc *AuthUserCreate) SetName(s string) *AuthUserCreate {
	auc.mutation.SetName(s)
	return auc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableName(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetName(*s)
	}
	return auc
}

// SetRealName sets the "real_name" field.
func (auc *AuthUserCreate) SetRealName(s string) *AuthUserCreate {
	auc.mutation.SetRealName(s)
	return auc
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableRealName(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetRealName(*s)
	}
	return auc
}

// SetEmail sets the "email" field.
func (auc *AuthUserCreate) SetEmail(s string) *AuthUserCreate {
	auc.mutation.SetEmail(s)
	return auc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableEmail(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetEmail(*s)
	}
	return auc
}

// SetAccessToken sets the "access_token" field.
func (auc *AuthUserCreate) SetAccessToken(s string) *AuthUserCreate {
	auc.mutation.SetAccessToken(s)
	return auc
}

// SetRefreshToken sets the "refresh_token" field.
func (auc *AuthUserCreate) SetRefreshToken(s string) *AuthUserCreate {
	auc.mutation.SetRefreshToken(s)
	return auc
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableRefreshToken(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetRefreshToken(*s)
	}
	return auc
}

// SetTokenType sets the "token_type" field.
func (auc *AuthUserCreate) SetTokenType(s string) *AuthUserCreate {
	auc.mutation.SetTokenType(s)
	return auc
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableTokenType(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetTokenType(*s)
	}
	return auc
}

// SetExpiresAt sets the "expires_at" field.
func (auc *AuthUserCreate) SetExpiresAt(t time.Time) *AuthUserCreate {
	auc.mutation.SetExpiresAt(t)
	return auc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableExpiresAt(t *time.Time) *AuthUserCreate {
	if t != nil {
		auc.SetExpiresAt(*t)
	}
	return auc
}

// SetScope sets the "scope" field.
func (auc *AuthUserCreate) SetScope(s string) *AuthUserCreate {
	auc.mutation.SetScope(s)
	return auc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableScope(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetScope(*s)
	}
	return auc
}

// SetRawProfile sets the "raw_profile" field.
func (auc *AuthUserCreate) SetRawProfile(m map[string]interface{}) *AuthUserCreate {
	auc.mutation.SetRawProfile(m)
	return auc
}

// SetID sets the "id" field.
func (auc *AuthUserCreate) SetID(s string) *AuthUserCreate {
	auc.mutation.SetID(s)
	return auc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (auc *AuthUserCreate) SetNillableID(s *string) *AuthUserCreate {
	if s != nil {
		auc.SetID(*s)
	}
	return auc
}

// SetProvider sets the "provider" edge to the AuthProvider entity.
func (auc *AuthUserCreate) SetProvider(a *AuthProvider) *AuthUserCreate {
	return auc.SetProviderID(a.ID)
}

// Mutation returns the AuthUserMutation object of the builder.
func (auc *AuthUserCreate) Mutation() *AuthUserMutation {
	return auc.mutation
}

// Save creates the AuthUser in the database.
func (auc *AuthUserCreate) Save(ctx context.Context) (*AuthUser, error) {
	auc.defaults()
	return withHooks(ctx, auc.sqlSave, auc.mutation, auc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (auc *AuthUserCreate) SaveX(ctx context.Context) *AuthUser {
	v, err := auc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auc *AuthUserCreate) Exec(ctx context.Context) error {
	_, err := auc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auc *AuthUserCreate) ExecX(ctx context.Context) {
	if err := auc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auc *AuthUserCreate) defaults() {
	if _, ok := auc.mutation.CreatedAt(); !ok {
		v := authuser.DefaultCreatedAt()
		auc.mutation.SetCreatedAt(v)
	}
	if _, ok := auc.mutation.UpdatedAt(); !ok {
		v := authuser.DefaultUpdatedAt()
		auc.mutation.SetUpdatedAt(v)
	}
	if _, ok := auc.mutation.ID(); !ok {
		v := authuser.DefaultID()
		auc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auc *AuthUserCreate) check() error {
	if _, ok := auc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entgen: missing required field "AuthUser.created_at"`)}
	}
	if _, ok := auc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entgen: missing required field "AuthUser.updated_at"`)}
	}
	if v, ok := auc.mutation.CreatedBy(); ok {
		if err := authuser.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.created_by": %w`, err)}
		}
	}
	if v, ok := auc.mutation.UpdatedBy(); ok {
		if err := authuser.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.updated_by": %w`, err)}
		}
	}
	if v, ok := auc.mutation.DeletedBy(); ok {
		if err := authuser.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "deleted_by", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.deleted_by": %w`, err)}
		}
	}
	if _, ok := auc.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`entgen: missing required field "AuthUser.provider_id"`)}
	}
	if _, ok := auc.mutation.ProviderUserID(); !ok {
		return &ValidationError{Name: "provider_user_id", err: errors.New(`entgen: missing required field "AuthUser.provider_user_id"`)}
	}
	if v, ok := auc.mutation.ProviderUserID(); ok {
		if err := authuser.ProviderUserIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_user_id", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.provider_user_id": %w`, err)}
		}
	}
	if v, ok := auc.mutation.TeamID(); ok {
		if err := authuser.TeamIDValidator(v); err != nil {
			return &ValidationError{Name: "team_id", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.team_id": %w`, err)}
		}
	}
	if v, ok := auc.mutation.Name(); ok {
		if err := authuser.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.name": %w`, err)}
		}
	}
	if v, ok := auc.mutation.RealName(); ok {
		if err := authuser.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.real_name": %w`, err)}
		}
	}
	if v, ok := auc.mutation.Email(); ok {
		if err := authuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.email": %w`, err)}
		}
	}
	if _, ok := auc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`entgen: missing required field "AuthUser.access_token"`)}
	}
	if v, ok := auc.mutation.AccessToken(); ok {
		if err := authuser.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.access_token": %w`, err)}
		}
	}
	if v, ok := auc.mutation.TokenType(); ok {
		if err := authuser.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.token_type": %w`, err)}
		}
	}
	if v, ok := auc.mutation.ID(); ok {
		if err := authuser.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.id": %w`, err)}
		}
	}
	if len(auc.mutation.ProviderIDs()) == 0 {
		return &ValidationError{Name: "provider", err: errors.New(`entgen: missing required edge "AuthUser.provider"`)}
	}
	return nil
}

func (auc *AuthUserCreate) sqlSave(ctx context.Context) (*AuthUser, error) {
	if err := auc.check(); err != nil {
		return nil, err
	}
	_node, _spec := auc.createSpec()
	if err := sqlgraph.CreateNode(ctx, auc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AuthUser.ID type: %T", _spec.ID.Value)
		}
	}
	auc.mutation.id = &_node.ID
	auc.mutation.done = true
	return _node, nil
}

func (auc *AuthUserCreate) createSpec() (*AuthUser, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthUser{config: auc.config}
		_spec = sqlgraph.NewCreateSpec(authuser.Table, sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeString))
	)
	if id, ok := auc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := auc.mutation.CreatedAt(); ok {
		_spec.SetField(authuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := auc.mutation.UpdatedAt(); ok {
		_spec.SetField(authuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := auc.mutation.DeletedAt(); ok {
		_spec.SetField(authuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := auc.mutation.CreatedBy(); ok {
		_spec.SetField(authuser.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = &value
	}
	if value, ok := auc.mutation.UpdatedBy(); ok {
		_spec.SetField(authuser.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = &value
	}
	if value, ok := auc.mutation.DeletedBy(); ok {
		_spec.SetField(authuser.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := auc.mutation.UserAgent(); ok {
		_spec.SetField(authuser.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = &value
	}
	if value, ok := auc.mutation.IPAddress(); ok {
		_spec.SetField(authuser.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = &value
	}
	if value, ok := auc.mutation.ProviderUserID(); ok {
		_spec.SetField(authuser.FieldProviderUserID, field.TypeString, value)
		_node.ProviderUserID = value
	}
	if value, ok := auc.mutation.TeamID(); ok {
		_spec.SetField(authuser.FieldTeamID, field.TypeString, value)
		_node.TeamID = &value
	}
	if value, ok := auc.mutation.Name(); ok {
		_spec.SetField(authuser.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := auc.mutation.RealName(); ok {
		_spec.SetField(authuser.FieldRealName, field.TypeString, value)
		_node.RealName = &value
	}
	if value, ok := auc.mutation.Email(); ok {
		_spec.SetField(authuser.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := auc.mutation.AccessToken(); ok {
		_spec.SetField(authuser.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := auc.mutation.RefreshToken(); ok {
		_spec.SetField(authuser.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = &value
	}
	if value, ok := auc.mutation.TokenType(); ok {
		_spec.SetField(authuser.FieldTokenType, field.TypeString, value)
		_node.TokenType = &value
	}
	if value, ok := auc.mutation.ExpiresAt(); ok {
		_spec.SetField(authuser.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := auc.mutation.Scope(); ok {
		_spec.SetField(authuser.FieldScope, field.TypeString, value)
		_node.Scope = &value
	}
	if value, ok := auc.mutation.RawProfile(); ok {
		_spec.SetField(authuser.FieldRawProfile, field.TypeJSON, value)
		_node.RawProfile = value
	}
	if nodes := auc.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authuser.ProviderTable,
			Columns: []string{authuser.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authprovider.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProviderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthUserCreateBulk is the builder for creating many AuthUser entities in bulk.
type AuthUserCreateBulk struct {
	config
	err      error
	builders []*AuthUserCreate
}

// Save creates the AuthUser entities in the database.
func (aucb *AuthUserCreateBulk) Save(ctx context.Context) ([]*AuthUser, error) {
	if aucb.err != nil {
		return nil, aucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aucb.builders))
	nodes := make([]*AuthUser, len(aucb.builders))
	mutators := make([]Mutator, len(aucb.builders))
	for i := range aucb.builders {
		func(i int, root context.Context) {
			builder := aucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aucb *AuthUserCreateBulk) SaveX(ctx context.Context) []*AuthUser {
	v, err := aucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aucb *AuthUserCreateBulk) Exec(ctx context.Context) error {
	_, err := aucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aucb *AuthUserCreateBulk) ExecX(ctx context.Context) {
	if err := aucb.Exec(ctx); err != nil {
		panic(err)
	}
}
