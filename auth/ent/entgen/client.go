// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"auth/ent/entgen/migrate"

	"auth/ent/entgen/authprovider"
	"auth/ent/entgen/authuser"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AuthProvider is the client for interacting with the AuthProvider builders.
	AuthProvider *AuthProviderClient
	// AuthUser is the client for interacting with the AuthUser builders.
	AuthUser *AuthUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AuthProvider = NewAuthProviderClient(c.config)
	c.AuthUser = NewAuthUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("entgen: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("entgen: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		AuthProvider: NewAuthProviderClient(cfg),
		AuthUser:     NewAuthUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		AuthProvider: NewAuthProviderClient(cfg),
		AuthUser:     NewAuthUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AuthProvider.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AuthProvider.Use(hooks...)
	c.AuthUser.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.AuthProvider.Intercept(interceptors...)
	c.AuthUser.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuthProviderMutation:
		return c.AuthProvider.mutate(ctx, m)
	case *AuthUserMutation:
		return c.AuthUser.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("entgen: unknown mutation type %T", m)
	}
}

// AuthProviderClient is a client for the AuthProvider schema.
type AuthProviderClient struct {
	config
}

// NewAuthProviderClient returns a client for the AuthProvider from the given config.
func NewAuthProviderClient(c config) *AuthProviderClient {
	return &AuthProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authprovider.Hooks(f(g(h())))`.
func (c *AuthProviderClient) Use(hooks ...Hook) {
	c.hooks.AuthProvider = append(c.hooks.AuthProvider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authprovider.Intercept(f(g(h())))`.
func (c *AuthProviderClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuthProvider = append(c.inters.AuthProvider, interceptors...)
}

// Create returns a builder for creating a AuthProvider entity.
func (c *AuthProviderClient) Create() *AuthProviderCreate {
	mutation := newAuthProviderMutation(c.config, OpCreate)
	return &AuthProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthProvider entities.
func (c *AuthProviderClient) CreateBulk(builders ...*AuthProviderCreate) *AuthProviderCreateBulk {
	return &AuthProviderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthProviderClient) MapCreateBulk(slice any, setFunc func(*AuthProviderCreate, int)) *AuthProviderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthProviderCreateBulk{err: fmt.Errorf("calling to AuthProviderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthProviderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthProvider.
func (c *AuthProviderClient) Update() *AuthProviderUpdate {
	mutation := newAuthProviderMutation(c.config, OpUpdate)
	return &AuthProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthProviderClient) UpdateOne(ap *AuthProvider) *AuthProviderUpdateOne {
	mutation := newAuthProviderMutation(c.config, OpUpdateOne, withAuthProvider(ap))
	return &AuthProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthProviderClient) UpdateOneID(id int) *AuthProviderUpdateOne {
	mutation := newAuthProviderMutation(c.config, OpUpdateOne, withAuthProviderID(id))
	return &AuthProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthProvider.
func (c *AuthProviderClient) Delete() *AuthProviderDelete {
	mutation := newAuthProviderMutation(c.config, OpDelete)
	return &AuthProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthProviderClient) DeleteOne(ap *AuthProvider) *AuthProviderDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthProviderClient) DeleteOneID(id int) *AuthProviderDeleteOne {
	builder := c.Delete().Where(authprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthProviderDeleteOne{builder}
}

// Query returns a query builder for AuthProvider.
func (c *AuthProviderClient) Query() *AuthProviderQuery {
	return &AuthProviderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthProvider},
		inters: c.Interceptors(),
	}
}

// Get returns a AuthProvider entity by its id.
func (c *AuthProviderClient) Get(ctx context.Context, id int) (*AuthProvider, error) {
	return c.Query().Where(authprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthProviderClient) GetX(ctx context.Context, id int) *AuthProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a AuthProvider.
func (c *AuthProviderClient) QueryUsers(ap *AuthProvider) *AuthUserQuery {
	query := (&AuthUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(authprovider.Table, authprovider.FieldID, id),
			sqlgraph.To(authuser.Table, authuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, authprovider.UsersTable, authprovider.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthProviderClient) Hooks() []Hook {
	return c.hooks.AuthProvider
}

// Interceptors returns the client interceptors.
func (c *AuthProviderClient) Interceptors() []Interceptor {
	return c.inters.AuthProvider
}

func (c *AuthProviderClient) mutate(ctx context.Context, m *AuthProviderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthProviderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthProviderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgen: unknown AuthProvider mutation op: %q", m.Op())
	}
}

// AuthUserClient is a client for the AuthUser schema.
type AuthUserClient struct {
	config
}

// NewAuthUserClient returns a client for the AuthUser from the given config.
func NewAuthUserClient(c config) *AuthUserClient {
	return &AuthUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authuser.Hooks(f(g(h())))`.
func (c *AuthUserClient) Use(hooks ...Hook) {
	c.hooks.AuthUser = append(c.hooks.AuthUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authuser.Intercept(f(g(h())))`.
func (c *AuthUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuthUser = append(c.inters.AuthUser, interceptors...)
}

// Create returns a builder for creating a AuthUser entity.
func (c *AuthUserClient) Create() *AuthUserCreate {
	mutation := newAuthUserMutation(c.config, OpCreate)
	return &AuthUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthUser entities.
func (c *AuthUserClient) CreateBulk(builders ...*AuthUserCreate) *AuthUserCreateBulk {
	return &AuthUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthUserClient) MapCreateBulk(slice any, setFunc func(*AuthUserCreate, int)) *AuthUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthUserCreateBulk{err: fmt.Errorf("calling to AuthUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthUser.
func (c *AuthUserClient) Update() *AuthUserUpdate {
	mutation := newAuthUserMutation(c.config, OpUpdate)
	return &AuthUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthUserClient) UpdateOne(au *AuthUser) *AuthUserUpdateOne {
	mutation := newAuthUserMutation(c.config, OpUpdateOne, withAuthUser(au))
	return &AuthUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthUserClient) UpdateOneID(id string) *AuthUserUpdateOne {
	mutation := newAuthUserMutation(c.config, OpUpdateOne, withAuthUserID(id))
	return &AuthUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthUser.
func (c *AuthUserClient) Delete() *AuthUserDelete {
	mutation := newAuthUserMutation(c.config, OpDelete)
	return &AuthUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthUserClient) DeleteOne(au *AuthUser) *AuthUserDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthUserClient) DeleteOneID(id string) *AuthUserDeleteOne {
	builder := c.Delete().Where(authuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthUserDeleteOne{builder}
}

// Query returns a query builder for AuthUser.
func (c *AuthUserClient) Query() *AuthUserQuery {
	return &AuthUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthUser},
		inters: c.Interceptors(),
	}
}

// Get returns a AuthUser entity by its id.
func (c *AuthUserClient) Get(ctx context.Context, id string) (*AuthUser, error) {
	return c.Query().Where(authuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthUserClient) GetX(ctx context.Context, id string) *AuthUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvider queries the provider edge of a AuthUser.
func (c *AuthUserClient) QueryProvider(au *AuthUser) *AuthProviderQuery {
	query := (&AuthProviderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(authuser.Table, authuser.FieldID, id),
			sqlgraph.To(authprovider.Table, authprovider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, authuser.ProviderTable, authuser.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthUserClient) Hooks() []Hook {
	return c.hooks.AuthUser
}

// Interceptors returns the client interceptors.
func (c *AuthUserClient) Interceptors() []Interceptor {
	return c.inters.AuthUser
}

func (c *AuthUserClient) mutate(ctx context.Context, m *AuthUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgen: unknown AuthUser mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AuthProvider, AuthUser []ent.Hook
	}
	inters struct {
		AuthProvider, AuthUser []ent.Interceptor
	}
)
