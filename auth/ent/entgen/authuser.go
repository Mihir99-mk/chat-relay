// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"auth/ent/entgen/authprovider"
	"auth/ent/entgen/authuser"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AuthUser is the model entity for the AuthUser schema.
type AuthUser struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy *string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent *string `json:"user_agent,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress *string `json:"ip_address,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID int `json:"provider_id,omitempty"`
	// ProviderUserID holds the value of the "provider_user_id" field.
	ProviderUserID string `json:"provider_user_id,omitempty"`
	// TeamID holds the value of the "team_id" field.
	TeamID *string `json:"team_id,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// RealName holds the value of the "real_name" field.
	RealName *string `json:"real_name,omitempty"`
	// Email holds the value of the "email" field.
	Email *string `json:"email,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken *string `json:"refresh_token,omitempty"`
	// TokenType holds the value of the "token_type" field.
	TokenType *string `json:"token_type,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope *string `json:"scope,omitempty"`
	// RawProfile holds the value of the "raw_profile" field.
	RawProfile map[string]interface{} `json:"raw_profile,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthUserQuery when eager-loading is set.
	Edges        AuthUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthUserEdges holds the relations/edges for other nodes in the graph.
type AuthUserEdges struct {
	// Foreign key to auth_providers(id)
	Provider *AuthProvider `json:"provider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthUserEdges) ProviderOrErr() (*AuthProvider, error) {
	if e.Provider != nil {
		return e.Provider, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: authprovider.Label}
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authuser.FieldRawProfile:
			values[i] = new([]byte)
		case authuser.FieldProviderID:
			values[i] = new(sql.NullInt64)
		case authuser.FieldID, authuser.FieldCreatedBy, authuser.FieldUpdatedBy, authuser.FieldDeletedBy, authuser.FieldUserAgent, authuser.FieldIPAddress, authuser.FieldProviderUserID, authuser.FieldTeamID, authuser.FieldName, authuser.FieldRealName, authuser.FieldEmail, authuser.FieldAccessToken, authuser.FieldRefreshToken, authuser.FieldTokenType, authuser.FieldScope:
			values[i] = new(sql.NullString)
		case authuser.FieldCreatedAt, authuser.FieldUpdatedAt, authuser.FieldDeletedAt, authuser.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthUser fields.
func (au *AuthUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authuser.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				au.ID = value.String
			}
		case authuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				au.CreatedAt = value.Time
			}
		case authuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				au.UpdatedAt = value.Time
			}
		case authuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				au.DeletedAt = new(time.Time)
				*au.DeletedAt = value.Time
			}
		case authuser.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				au.CreatedBy = new(string)
				*au.CreatedBy = value.String
			}
		case authuser.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				au.UpdatedBy = new(string)
				*au.UpdatedBy = value.String
			}
		case authuser.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				au.DeletedBy = new(string)
				*au.DeletedBy = value.String
			}
		case authuser.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				au.UserAgent = new(string)
				*au.UserAgent = value.String
			}
		case authuser.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				au.IPAddress = new(string)
				*au.IPAddress = value.String
			}
		case authuser.FieldProviderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				au.ProviderID = int(value.Int64)
			}
		case authuser.FieldProviderUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_user_id", values[i])
			} else if value.Valid {
				au.ProviderUserID = value.String
			}
		case authuser.FieldTeamID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value.Valid {
				au.TeamID = new(string)
				*au.TeamID = value.String
			}
		case authuser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				au.Name = new(string)
				*au.Name = value.String
			}
		case authuser.FieldRealName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field real_name", values[i])
			} else if value.Valid {
				au.RealName = new(string)
				*au.RealName = value.String
			}
		case authuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				au.Email = new(string)
				*au.Email = value.String
			}
		case authuser.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				au.AccessToken = value.String
			}
		case authuser.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				au.RefreshToken = new(string)
				*au.RefreshToken = value.String
			}
		case authuser.FieldTokenType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_type", values[i])
			} else if value.Valid {
				au.TokenType = new(string)
				*au.TokenType = value.String
			}
		case authuser.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				au.ExpiresAt = new(time.Time)
				*au.ExpiresAt = value.Time
			}
		case authuser.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				au.Scope = new(string)
				*au.Scope = value.String
			}
		case authuser.FieldRawProfile:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw_profile", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &au.RawProfile); err != nil {
					return fmt.Errorf("unmarshal field raw_profile: %w", err)
				}
			}
		default:
			au.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthUser.
// This includes values selected through modifiers, order, etc.
func (au *AuthUser) Value(name string) (ent.Value, error) {
	return au.selectValues.Get(name)
}

// QueryProvider queries the "provider" edge of the AuthUser entity.
func (au *AuthUser) QueryProvider() *AuthProviderQuery {
	return NewAuthUserClient(au.config).QueryProvider(au)
}

// Update returns a builder for updating this AuthUser.
// Note that you need to call AuthUser.Unwrap() before calling this method if this AuthUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AuthUser) Update() *AuthUserUpdateOne {
	return NewAuthUserClient(au.config).UpdateOne(au)
}

// Unwrap unwraps the AuthUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AuthUser) Unwrap() *AuthUser {
	_tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("entgen: AuthUser is not a transactional entity")
	}
	au.config.driver = _tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AuthUser) String() string {
	var builder strings.Builder
	builder.WriteString("AuthUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", au.ID))
	builder.WriteString("created_at=")
	builder.WriteString(au.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(au.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := au.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := au.CreatedBy; v != nil {
		builder.WriteString("created_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := au.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := au.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := au.UserAgent; v != nil {
		builder.WriteString("user_agent=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := au.IPAddress; v != nil {
		builder.WriteString("ip_address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(fmt.Sprintf("%v", au.ProviderID))
	builder.WriteString(", ")
	builder.WriteString("provider_user_id=")
	builder.WriteString(au.ProviderUserID)
	builder.WriteString(", ")
	if v := au.TeamID; v != nil {
		builder.WriteString("team_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := au.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := au.RealName; v != nil {
		builder.WriteString("real_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := au.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(au.AccessToken)
	builder.WriteString(", ")
	if v := au.RefreshToken; v != nil {
		builder.WriteString("refresh_token=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := au.TokenType; v != nil {
		builder.WriteString("token_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := au.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := au.Scope; v != nil {
		builder.WriteString("scope=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("raw_profile=")
	builder.WriteString(fmt.Sprintf("%v", au.RawProfile))
	builder.WriteByte(')')
	return builder.String()
}

// AuthUsers is a parsable slice of AuthUser.
type AuthUsers []*AuthUser
