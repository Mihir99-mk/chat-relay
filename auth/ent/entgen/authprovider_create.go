// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"auth/ent/entgen/authprovider"
	"auth/ent/entgen/authuser"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthProviderCreate is the builder for creating a AuthProvider entity.
type AuthProviderCreate struct {
	config
	mutation *AuthProviderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (apc *AuthProviderCreate) SetCreatedAt(t time.Time) *AuthProviderCreate {
	apc.mutation.SetCreatedAt(t)
	return apc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apc *AuthProviderCreate) SetNillableCreatedAt(t *time.Time) *AuthProviderCreate {
	if t != nil {
		apc.SetCreatedAt(*t)
	}
	return apc
}

// SetUpdatedAt sets the "updated_at" field.
func (apc *AuthProviderCreate) SetUpdatedAt(t time.Time) *AuthProviderCreate {
	apc.mutation.SetUpdatedAt(t)
	return apc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apc *AuthProviderCreate) SetNillableUpdatedAt(t *time.Time) *AuthProviderCreate {
	if t != nil {
		apc.SetUpdatedAt(*t)
	}
	return apc
}

// SetDeletedAt sets the "deleted_at" field.
func (apc *AuthProviderCreate) SetDeletedAt(t time.Time) *AuthProviderCreate {
	apc.mutation.SetDeletedAt(t)
	return apc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apc *AuthProviderCreate) SetNillableDeletedAt(t *time.Time) *AuthProviderCreate {
	if t != nil {
		apc.SetDeletedAt(*t)
	}
	return apc
}

// SetCreatedBy sets the "created_by" field.
func (apc *AuthProviderCreate) SetCreatedBy(s string) *AuthProviderCreate {
	apc.mutation.SetCreatedBy(s)
	return apc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (apc *AuthProviderCreate) SetNillableCreatedBy(s *string) *AuthProviderCreate {
	if s != nil {
		apc.SetCreatedBy(*s)
	}
	return apc
}

// SetUpdatedBy sets the "updated_by" field.
func (apc *AuthProviderCreate) SetUpdatedBy(s string) *AuthProviderCreate {
	apc.mutation.SetUpdatedBy(s)
	return apc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apc *AuthProviderCreate) SetNillableUpdatedBy(s *string) *AuthProviderCreate {
	if s != nil {
		apc.SetUpdatedBy(*s)
	}
	return apc
}

// SetDeletedBy sets the "deleted_by" field.
func (apc *AuthProviderCreate) SetDeletedBy(s string) *AuthProviderCreate {
	apc.mutation.SetDeletedBy(s)
	return apc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (apc *AuthProviderCreate) SetNillableDeletedBy(s *string) *AuthProviderCreate {
	if s != nil {
		apc.SetDeletedBy(*s)
	}
	return apc
}

// SetUserAgent sets the "user_agent" field.
func (apc *AuthProviderCreate) SetUserAgent(s string) *AuthProviderCreate {
	apc.mutation.SetUserAgent(s)
	return apc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (apc *AuthProviderCreate) SetNillableUserAgent(s *string) *AuthProviderCreate {
	if s != nil {
		apc.SetUserAgent(*s)
	}
	return apc
}

// SetIPAddress sets the "ip_address" field.
func (apc *AuthProviderCreate) SetIPAddress(s string) *AuthProviderCreate {
	apc.mutation.SetIPAddress(s)
	return apc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (apc *AuthProviderCreate) SetNillableIPAddress(s *string) *AuthProviderCreate {
	if s != nil {
		apc.SetIPAddress(*s)
	}
	return apc
}

// SetName sets the "name" field.
func (apc *AuthProviderCreate) SetName(s string) *AuthProviderCreate {
	apc.mutation.SetName(s)
	return apc
}

// SetDisplayName sets the "display_name" field.
func (apc *AuthProviderCreate) SetDisplayName(s string) *AuthProviderCreate {
	apc.mutation.SetDisplayName(s)
	return apc
}

// SetID sets the "id" field.
func (apc *AuthProviderCreate) SetID(i int) *AuthProviderCreate {
	apc.mutation.SetID(i)
	return apc
}

// AddUserIDs adds the "users" edge to the AuthUser entity by IDs.
func (apc *AuthProviderCreate) AddUserIDs(ids ...string) *AuthProviderCreate {
	apc.mutation.AddUserIDs(ids...)
	return apc
}

// AddUsers adds the "users" edges to the AuthUser entity.
func (apc *AuthProviderCreate) AddUsers(a ...*AuthUser) *AuthProviderCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apc.AddUserIDs(ids...)
}

// Mutation returns the AuthProviderMutation object of the builder.
func (apc *AuthProviderCreate) Mutation() *AuthProviderMutation {
	return apc.mutation
}

// Save creates the AuthProvider in the database.
func (apc *AuthProviderCreate) Save(ctx context.Context) (*AuthProvider, error) {
	apc.defaults()
	return withHooks(ctx, apc.sqlSave, apc.mutation, apc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AuthProviderCreate) SaveX(ctx context.Context) *AuthProvider {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AuthProviderCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AuthProviderCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *AuthProviderCreate) defaults() {
	if _, ok := apc.mutation.CreatedAt(); !ok {
		v := authprovider.DefaultCreatedAt()
		apc.mutation.SetCreatedAt(v)
	}
	if _, ok := apc.mutation.UpdatedAt(); !ok {
		v := authprovider.DefaultUpdatedAt()
		apc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AuthProviderCreate) check() error {
	if _, ok := apc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entgen: missing required field "AuthProvider.created_at"`)}
	}
	if _, ok := apc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entgen: missing required field "AuthProvider.updated_at"`)}
	}
	if v, ok := apc.mutation.CreatedBy(); ok {
		if err := authprovider.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`entgen: validator failed for field "AuthProvider.created_by": %w`, err)}
		}
	}
	if v, ok := apc.mutation.UpdatedBy(); ok {
		if err := authprovider.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`entgen: validator failed for field "AuthProvider.updated_by": %w`, err)}
		}
	}
	if v, ok := apc.mutation.DeletedBy(); ok {
		if err := authprovider.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "deleted_by", err: fmt.Errorf(`entgen: validator failed for field "AuthProvider.deleted_by": %w`, err)}
		}
	}
	if _, ok := apc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entgen: missing required field "AuthProvider.name"`)}
	}
	if v, ok := apc.mutation.Name(); ok {
		if err := authprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entgen: validator failed for field "AuthProvider.name": %w`, err)}
		}
	}
	if _, ok := apc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`entgen: missing required field "AuthProvider.display_name"`)}
	}
	if v, ok := apc.mutation.ID(); ok {
		if err := authprovider.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entgen: validator failed for field "AuthProvider.id": %w`, err)}
		}
	}
	return nil
}

func (apc *AuthProviderCreate) sqlSave(ctx context.Context) (*AuthProvider, error) {
	if err := apc.check(); err != nil {
		return nil, err
	}
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	apc.mutation.id = &_node.ID
	apc.mutation.done = true
	return _node, nil
}

func (apc *AuthProviderCreate) createSpec() (*AuthProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthProvider{config: apc.config}
		_spec = sqlgraph.NewCreateSpec(authprovider.Table, sqlgraph.NewFieldSpec(authprovider.FieldID, field.TypeInt))
	)
	if id, ok := apc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := apc.mutation.CreatedAt(); ok {
		_spec.SetField(authprovider.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := apc.mutation.UpdatedAt(); ok {
		_spec.SetField(authprovider.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := apc.mutation.DeletedAt(); ok {
		_spec.SetField(authprovider.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := apc.mutation.CreatedBy(); ok {
		_spec.SetField(authprovider.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = &value
	}
	if value, ok := apc.mutation.UpdatedBy(); ok {
		_spec.SetField(authprovider.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = &value
	}
	if value, ok := apc.mutation.DeletedBy(); ok {
		_spec.SetField(authprovider.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := apc.mutation.UserAgent(); ok {
		_spec.SetField(authprovider.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = &value
	}
	if value, ok := apc.mutation.IPAddress(); ok {
		_spec.SetField(authprovider.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = &value
	}
	if value, ok := apc.mutation.Name(); ok {
		_spec.SetField(authprovider.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := apc.mutation.DisplayName(); ok {
		_spec.SetField(authprovider.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = &value
	}
	if nodes := apc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authprovider.UsersTable,
			Columns: []string{authprovider.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthProviderCreateBulk is the builder for creating many AuthProvider entities in bulk.
type AuthProviderCreateBulk struct {
	config
	err      error
	builders []*AuthProviderCreate
}

// Save creates the AuthProvider entities in the database.
func (apcb *AuthProviderCreateBulk) Save(ctx context.Context) ([]*AuthProvider, error) {
	if apcb.err != nil {
		return nil, apcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AuthProvider, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AuthProviderCreateBulk) SaveX(ctx context.Context) []*AuthProvider {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AuthProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AuthProviderCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}
