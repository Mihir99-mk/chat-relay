// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"auth/ent/entgen/authprovider"
	"auth/ent/entgen/authuser"
	"auth/ent/entgen/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthUserUpdate is the builder for updating AuthUser entities.
type AuthUserUpdate struct {
	config
	hooks    []Hook
	mutation *AuthUserMutation
}

// Where appends a list predicates to the AuthUserUpdate builder.
func (auu *AuthUserUpdate) Where(ps ...predicate.AuthUser) *AuthUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetUpdatedAt sets the "updated_at" field.
func (auu *AuthUserUpdate) SetUpdatedAt(t time.Time) *AuthUserUpdate {
	auu.mutation.SetUpdatedAt(t)
	return auu
}

// SetDeletedAt sets the "deleted_at" field.
func (auu *AuthUserUpdate) SetDeletedAt(t time.Time) *AuthUserUpdate {
	auu.mutation.SetDeletedAt(t)
	return auu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableDeletedAt(t *time.Time) *AuthUserUpdate {
	if t != nil {
		auu.SetDeletedAt(*t)
	}
	return auu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auu *AuthUserUpdate) ClearDeletedAt() *AuthUserUpdate {
	auu.mutation.ClearDeletedAt()
	return auu
}

// SetCreatedBy sets the "created_by" field.
func (auu *AuthUserUpdate) SetCreatedBy(s string) *AuthUserUpdate {
	auu.mutation.SetCreatedBy(s)
	return auu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableCreatedBy(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetCreatedBy(*s)
	}
	return auu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (auu *AuthUserUpdate) ClearCreatedBy() *AuthUserUpdate {
	auu.mutation.ClearCreatedBy()
	return auu
}

// SetUpdatedBy sets the "updated_by" field.
func (auu *AuthUserUpdate) SetUpdatedBy(s string) *AuthUserUpdate {
	auu.mutation.SetUpdatedBy(s)
	return auu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableUpdatedBy(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetUpdatedBy(*s)
	}
	return auu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (auu *AuthUserUpdate) ClearUpdatedBy() *AuthUserUpdate {
	auu.mutation.ClearUpdatedBy()
	return auu
}

// SetDeletedBy sets the "deleted_by" field.
func (auu *AuthUserUpdate) SetDeletedBy(s string) *AuthUserUpdate {
	auu.mutation.SetDeletedBy(s)
	return auu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableDeletedBy(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetDeletedBy(*s)
	}
	return auu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (auu *AuthUserUpdate) ClearDeletedBy() *AuthUserUpdate {
	auu.mutation.ClearDeletedBy()
	return auu
}

// SetUserAgent sets the "user_agent" field.
func (auu *AuthUserUpdate) SetUserAgent(s string) *AuthUserUpdate {
	auu.mutation.SetUserAgent(s)
	return auu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableUserAgent(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetUserAgent(*s)
	}
	return auu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (auu *AuthUserUpdate) ClearUserAgent() *AuthUserUpdate {
	auu.mutation.ClearUserAgent()
	return auu
}

// SetIPAddress sets the "ip_address" field.
func (auu *AuthUserUpdate) SetIPAddress(s string) *AuthUserUpdate {
	auu.mutation.SetIPAddress(s)
	return auu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableIPAddress(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetIPAddress(*s)
	}
	return auu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (auu *AuthUserUpdate) ClearIPAddress() *AuthUserUpdate {
	auu.mutation.ClearIPAddress()
	return auu
}

// SetProviderID sets the "provider_id" field.
func (auu *AuthUserUpdate) SetProviderID(i int) *AuthUserUpdate {
	auu.mutation.SetProviderID(i)
	return auu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableProviderID(i *int) *AuthUserUpdate {
	if i != nil {
		auu.SetProviderID(*i)
	}
	return auu
}

// SetProviderUserID sets the "provider_user_id" field.
func (auu *AuthUserUpdate) SetProviderUserID(s string) *AuthUserUpdate {
	auu.mutation.SetProviderUserID(s)
	return auu
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableProviderUserID(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetProviderUserID(*s)
	}
	return auu
}

// SetTeamID sets the "team_id" field.
func (auu *AuthUserUpdate) SetTeamID(s string) *AuthUserUpdate {
	auu.mutation.SetTeamID(s)
	return auu
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableTeamID(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetTeamID(*s)
	}
	return auu
}

// ClearTeamID clears the value of the "team_id" field.
func (auu *AuthUserUpdate) ClearTeamID() *AuthUserUpdate {
	auu.mutation.ClearTeamID()
	return auu
}

// SetName sets the "name" field.
func (auu *AuthUserUpdate) SetName(s string) *AuthUserUpdate {
	auu.mutation.SetName(s)
	return auu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableName(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetName(*s)
	}
	return auu
}

// ClearName clears the value of the "name" field.
func (auu *AuthUserUpdate) ClearName() *AuthUserUpdate {
	auu.mutation.ClearName()
	return auu
}

// SetRealName sets the "real_name" field.
func (auu *AuthUserUpdate) SetRealName(s string) *AuthUserUpdate {
	auu.mutation.SetRealName(s)
	return auu
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableRealName(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetRealName(*s)
	}
	return auu
}

// ClearRealName clears the value of the "real_name" field.
func (auu *AuthUserUpdate) ClearRealName() *AuthUserUpdate {
	auu.mutation.ClearRealName()
	return auu
}

// SetEmail sets the "email" field.
func (auu *AuthUserUpdate) SetEmail(s string) *AuthUserUpdate {
	auu.mutation.SetEmail(s)
	return auu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableEmail(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetEmail(*s)
	}
	return auu
}

// ClearEmail clears the value of the "email" field.
func (auu *AuthUserUpdate) ClearEmail() *AuthUserUpdate {
	auu.mutation.ClearEmail()
	return auu
}

// SetAccessToken sets the "access_token" field.
func (auu *AuthUserUpdate) SetAccessToken(s string) *AuthUserUpdate {
	auu.mutation.SetAccessToken(s)
	return auu
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableAccessToken(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetAccessToken(*s)
	}
	return auu
}

// SetRefreshToken sets the "refresh_token" field.
func (auu *AuthUserUpdate) SetRefreshToken(s string) *AuthUserUpdate {
	auu.mutation.SetRefreshToken(s)
	return auu
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableRefreshToken(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetRefreshToken(*s)
	}
	return auu
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (auu *AuthUserUpdate) ClearRefreshToken() *AuthUserUpdate {
	auu.mutation.ClearRefreshToken()
	return auu
}

// SetTokenType sets the "token_type" field.
func (auu *AuthUserUpdate) SetTokenType(s string) *AuthUserUpdate {
	auu.mutation.SetTokenType(s)
	return auu
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableTokenType(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetTokenType(*s)
	}
	return auu
}

// ClearTokenType clears the value of the "token_type" field.
func (auu *AuthUserUpdate) ClearTokenType() *AuthUserUpdate {
	auu.mutation.ClearTokenType()
	return auu
}

// SetExpiresAt sets the "expires_at" field.
func (auu *AuthUserUpdate) SetExpiresAt(t time.Time) *AuthUserUpdate {
	auu.mutation.SetExpiresAt(t)
	return auu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableExpiresAt(t *time.Time) *AuthUserUpdate {
	if t != nil {
		auu.SetExpiresAt(*t)
	}
	return auu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (auu *AuthUserUpdate) ClearExpiresAt() *AuthUserUpdate {
	auu.mutation.ClearExpiresAt()
	return auu
}

// SetScope sets the "scope" field.
func (auu *AuthUserUpdate) SetScope(s string) *AuthUserUpdate {
	auu.mutation.SetScope(s)
	return auu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (auu *AuthUserUpdate) SetNillableScope(s *string) *AuthUserUpdate {
	if s != nil {
		auu.SetScope(*s)
	}
	return auu
}

// ClearScope clears the value of the "scope" field.
func (auu *AuthUserUpdate) ClearScope() *AuthUserUpdate {
	auu.mutation.ClearScope()
	return auu
}

// SetRawProfile sets the "raw_profile" field.
func (auu *AuthUserUpdate) SetRawProfile(m map[string]interface{}) *AuthUserUpdate {
	auu.mutation.SetRawProfile(m)
	return auu
}

// ClearRawProfile clears the value of the "raw_profile" field.
func (auu *AuthUserUpdate) ClearRawProfile() *AuthUserUpdate {
	auu.mutation.ClearRawProfile()
	return auu
}

// SetProvider sets the "provider" edge to the AuthProvider entity.
func (auu *AuthUserUpdate) SetProvider(a *AuthProvider) *AuthUserUpdate {
	return auu.SetProviderID(a.ID)
}

// Mutation returns the AuthUserMutation object of the builder.
func (auu *AuthUserUpdate) Mutation() *AuthUserMutation {
	return auu.mutation
}

// ClearProvider clears the "provider" edge to the AuthProvider entity.
func (auu *AuthUserUpdate) ClearProvider() *AuthUserUpdate {
	auu.mutation.ClearProvider()
	return auu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AuthUserUpdate) Save(ctx context.Context) (int, error) {
	auu.defaults()
	return withHooks(ctx, auu.sqlSave, auu.mutation, auu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AuthUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AuthUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AuthUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auu *AuthUserUpdate) defaults() {
	if _, ok := auu.mutation.UpdatedAt(); !ok {
		v := authuser.UpdateDefaultUpdatedAt()
		auu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auu *AuthUserUpdate) check() error {
	if v, ok := auu.mutation.CreatedBy(); ok {
		if err := authuser.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.created_by": %w`, err)}
		}
	}
	if v, ok := auu.mutation.UpdatedBy(); ok {
		if err := authuser.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.updated_by": %w`, err)}
		}
	}
	if v, ok := auu.mutation.DeletedBy(); ok {
		if err := authuser.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "deleted_by", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.deleted_by": %w`, err)}
		}
	}
	if v, ok := auu.mutation.ProviderUserID(); ok {
		if err := authuser.ProviderUserIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_user_id", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.provider_user_id": %w`, err)}
		}
	}
	if v, ok := auu.mutation.TeamID(); ok {
		if err := authuser.TeamIDValidator(v); err != nil {
			return &ValidationError{Name: "team_id", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.team_id": %w`, err)}
		}
	}
	if v, ok := auu.mutation.Name(); ok {
		if err := authuser.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.name": %w`, err)}
		}
	}
	if v, ok := auu.mutation.RealName(); ok {
		if err := authuser.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.real_name": %w`, err)}
		}
	}
	if v, ok := auu.mutation.Email(); ok {
		if err := authuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.email": %w`, err)}
		}
	}
	if v, ok := auu.mutation.AccessToken(); ok {
		if err := authuser.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.access_token": %w`, err)}
		}
	}
	if v, ok := auu.mutation.TokenType(); ok {
		if err := authuser.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.token_type": %w`, err)}
		}
	}
	if auu.mutation.ProviderCleared() && len(auu.mutation.ProviderIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "AuthUser.provider"`)
	}
	return nil
}

func (auu *AuthUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := auu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authuser.Table, authuser.Columns, sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeString))
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.UpdatedAt(); ok {
		_spec.SetField(authuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auu.mutation.DeletedAt(); ok {
		_spec.SetField(authuser.FieldDeletedAt, field.TypeTime, value)
	}
	if auu.mutation.DeletedAtCleared() {
		_spec.ClearField(authuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auu.mutation.CreatedBy(); ok {
		_spec.SetField(authuser.FieldCreatedBy, field.TypeString, value)
	}
	if auu.mutation.CreatedByCleared() {
		_spec.ClearField(authuser.FieldCreatedBy, field.TypeString)
	}
	if value, ok := auu.mutation.UpdatedBy(); ok {
		_spec.SetField(authuser.FieldUpdatedBy, field.TypeString, value)
	}
	if auu.mutation.UpdatedByCleared() {
		_spec.ClearField(authuser.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := auu.mutation.DeletedBy(); ok {
		_spec.SetField(authuser.FieldDeletedBy, field.TypeString, value)
	}
	if auu.mutation.DeletedByCleared() {
		_spec.ClearField(authuser.FieldDeletedBy, field.TypeString)
	}
	if value, ok := auu.mutation.UserAgent(); ok {
		_spec.SetField(authuser.FieldUserAgent, field.TypeString, value)
	}
	if auu.mutation.UserAgentCleared() {
		_spec.ClearField(authuser.FieldUserAgent, field.TypeString)
	}
	if value, ok := auu.mutation.IPAddress(); ok {
		_spec.SetField(authuser.FieldIPAddress, field.TypeString, value)
	}
	if auu.mutation.IPAddressCleared() {
		_spec.ClearField(authuser.FieldIPAddress, field.TypeString)
	}
	if value, ok := auu.mutation.ProviderUserID(); ok {
		_spec.SetField(authuser.FieldProviderUserID, field.TypeString, value)
	}
	if value, ok := auu.mutation.TeamID(); ok {
		_spec.SetField(authuser.FieldTeamID, field.TypeString, value)
	}
	if auu.mutation.TeamIDCleared() {
		_spec.ClearField(authuser.FieldTeamID, field.TypeString)
	}
	if value, ok := auu.mutation.Name(); ok {
		_spec.SetField(authuser.FieldName, field.TypeString, value)
	}
	if auu.mutation.NameCleared() {
		_spec.ClearField(authuser.FieldName, field.TypeString)
	}
	if value, ok := auu.mutation.RealName(); ok {
		_spec.SetField(authuser.FieldRealName, field.TypeString, value)
	}
	if auu.mutation.RealNameCleared() {
		_spec.ClearField(authuser.FieldRealName, field.TypeString)
	}
	if value, ok := auu.mutation.Email(); ok {
		_spec.SetField(authuser.FieldEmail, field.TypeString, value)
	}
	if auu.mutation.EmailCleared() {
		_spec.ClearField(authuser.FieldEmail, field.TypeString)
	}
	if value, ok := auu.mutation.AccessToken(); ok {
		_spec.SetField(authuser.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := auu.mutation.RefreshToken(); ok {
		_spec.SetField(authuser.FieldRefreshToken, field.TypeString, value)
	}
	if auu.mutation.RefreshTokenCleared() {
		_spec.ClearField(authuser.FieldRefreshToken, field.TypeString)
	}
	if value, ok := auu.mutation.TokenType(); ok {
		_spec.SetField(authuser.FieldTokenType, field.TypeString, value)
	}
	if auu.mutation.TokenTypeCleared() {
		_spec.ClearField(authuser.FieldTokenType, field.TypeString)
	}
	if value, ok := auu.mutation.ExpiresAt(); ok {
		_spec.SetField(authuser.FieldExpiresAt, field.TypeTime, value)
	}
	if auu.mutation.ExpiresAtCleared() {
		_spec.ClearField(authuser.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := auu.mutation.Scope(); ok {
		_spec.SetField(authuser.FieldScope, field.TypeString, value)
	}
	if auu.mutation.ScopeCleared() {
		_spec.ClearField(authuser.FieldScope, field.TypeString)
	}
	if value, ok := auu.mutation.RawProfile(); ok {
		_spec.SetField(authuser.FieldRawProfile, field.TypeJSON, value)
	}
	if auu.mutation.RawProfileCleared() {
		_spec.ClearField(authuser.FieldRawProfile, field.TypeJSON)
	}
	if auu.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authuser.ProviderTable,
			Columns: []string{authuser.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authprovider.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authuser.ProviderTable,
			Columns: []string{authuser.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authprovider.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	auu.mutation.done = true
	return n, nil
}

// AuthUserUpdateOne is the builder for updating a single AuthUser entity.
type AuthUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthUserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auuo *AuthUserUpdateOne) SetUpdatedAt(t time.Time) *AuthUserUpdateOne {
	auuo.mutation.SetUpdatedAt(t)
	return auuo
}

// SetDeletedAt sets the "deleted_at" field.
func (auuo *AuthUserUpdateOne) SetDeletedAt(t time.Time) *AuthUserUpdateOne {
	auuo.mutation.SetDeletedAt(t)
	return auuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableDeletedAt(t *time.Time) *AuthUserUpdateOne {
	if t != nil {
		auuo.SetDeletedAt(*t)
	}
	return auuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auuo *AuthUserUpdateOne) ClearDeletedAt() *AuthUserUpdateOne {
	auuo.mutation.ClearDeletedAt()
	return auuo
}

// SetCreatedBy sets the "created_by" field.
func (auuo *AuthUserUpdateOne) SetCreatedBy(s string) *AuthUserUpdateOne {
	auuo.mutation.SetCreatedBy(s)
	return auuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableCreatedBy(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetCreatedBy(*s)
	}
	return auuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (auuo *AuthUserUpdateOne) ClearCreatedBy() *AuthUserUpdateOne {
	auuo.mutation.ClearCreatedBy()
	return auuo
}

// SetUpdatedBy sets the "updated_by" field.
func (auuo *AuthUserUpdateOne) SetUpdatedBy(s string) *AuthUserUpdateOne {
	auuo.mutation.SetUpdatedBy(s)
	return auuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableUpdatedBy(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetUpdatedBy(*s)
	}
	return auuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (auuo *AuthUserUpdateOne) ClearUpdatedBy() *AuthUserUpdateOne {
	auuo.mutation.ClearUpdatedBy()
	return auuo
}

// SetDeletedBy sets the "deleted_by" field.
func (auuo *AuthUserUpdateOne) SetDeletedBy(s string) *AuthUserUpdateOne {
	auuo.mutation.SetDeletedBy(s)
	return auuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableDeletedBy(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetDeletedBy(*s)
	}
	return auuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (auuo *AuthUserUpdateOne) ClearDeletedBy() *AuthUserUpdateOne {
	auuo.mutation.ClearDeletedBy()
	return auuo
}

// SetUserAgent sets the "user_agent" field.
func (auuo *AuthUserUpdateOne) SetUserAgent(s string) *AuthUserUpdateOne {
	auuo.mutation.SetUserAgent(s)
	return auuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableUserAgent(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetUserAgent(*s)
	}
	return auuo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (auuo *AuthUserUpdateOne) ClearUserAgent() *AuthUserUpdateOne {
	auuo.mutation.ClearUserAgent()
	return auuo
}

// SetIPAddress sets the "ip_address" field.
func (auuo *AuthUserUpdateOne) SetIPAddress(s string) *AuthUserUpdateOne {
	auuo.mutation.SetIPAddress(s)
	return auuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableIPAddress(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetIPAddress(*s)
	}
	return auuo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (auuo *AuthUserUpdateOne) ClearIPAddress() *AuthUserUpdateOne {
	auuo.mutation.ClearIPAddress()
	return auuo
}

// SetProviderID sets the "provider_id" field.
func (auuo *AuthUserUpdateOne) SetProviderID(i int) *AuthUserUpdateOne {
	auuo.mutation.SetProviderID(i)
	return auuo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableProviderID(i *int) *AuthUserUpdateOne {
	if i != nil {
		auuo.SetProviderID(*i)
	}
	return auuo
}

// SetProviderUserID sets the "provider_user_id" field.
func (auuo *AuthUserUpdateOne) SetProviderUserID(s string) *AuthUserUpdateOne {
	auuo.mutation.SetProviderUserID(s)
	return auuo
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableProviderUserID(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetProviderUserID(*s)
	}
	return auuo
}

// SetTeamID sets the "team_id" field.
func (auuo *AuthUserUpdateOne) SetTeamID(s string) *AuthUserUpdateOne {
	auuo.mutation.SetTeamID(s)
	return auuo
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableTeamID(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetTeamID(*s)
	}
	return auuo
}

// ClearTeamID clears the value of the "team_id" field.
func (auuo *AuthUserUpdateOne) ClearTeamID() *AuthUserUpdateOne {
	auuo.mutation.ClearTeamID()
	return auuo
}

// SetName sets the "name" field.
func (auuo *AuthUserUpdateOne) SetName(s string) *AuthUserUpdateOne {
	auuo.mutation.SetName(s)
	return auuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableName(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetName(*s)
	}
	return auuo
}

// ClearName clears the value of the "name" field.
func (auuo *AuthUserUpdateOne) ClearName() *AuthUserUpdateOne {
	auuo.mutation.ClearName()
	return auuo
}

// SetRealName sets the "real_name" field.
func (auuo *AuthUserUpdateOne) SetRealName(s string) *AuthUserUpdateOne {
	auuo.mutation.SetRealName(s)
	return auuo
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableRealName(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetRealName(*s)
	}
	return auuo
}

// ClearRealName clears the value of the "real_name" field.
func (auuo *AuthUserUpdateOne) ClearRealName() *AuthUserUpdateOne {
	auuo.mutation.ClearRealName()
	return auuo
}

// SetEmail sets the "email" field.
func (auuo *AuthUserUpdateOne) SetEmail(s string) *AuthUserUpdateOne {
	auuo.mutation.SetEmail(s)
	return auuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableEmail(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetEmail(*s)
	}
	return auuo
}

// ClearEmail clears the value of the "email" field.
func (auuo *AuthUserUpdateOne) ClearEmail() *AuthUserUpdateOne {
	auuo.mutation.ClearEmail()
	return auuo
}

// SetAccessToken sets the "access_token" field.
func (auuo *AuthUserUpdateOne) SetAccessToken(s string) *AuthUserUpdateOne {
	auuo.mutation.SetAccessToken(s)
	return auuo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableAccessToken(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetAccessToken(*s)
	}
	return auuo
}

// SetRefreshToken sets the "refresh_token" field.
func (auuo *AuthUserUpdateOne) SetRefreshToken(s string) *AuthUserUpdateOne {
	auuo.mutation.SetRefreshToken(s)
	return auuo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableRefreshToken(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetRefreshToken(*s)
	}
	return auuo
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (auuo *AuthUserUpdateOne) ClearRefreshToken() *AuthUserUpdateOne {
	auuo.mutation.ClearRefreshToken()
	return auuo
}

// SetTokenType sets the "token_type" field.
func (auuo *AuthUserUpdateOne) SetTokenType(s string) *AuthUserUpdateOne {
	auuo.mutation.SetTokenType(s)
	return auuo
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableTokenType(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetTokenType(*s)
	}
	return auuo
}

// ClearTokenType clears the value of the "token_type" field.
func (auuo *AuthUserUpdateOne) ClearTokenType() *AuthUserUpdateOne {
	auuo.mutation.ClearTokenType()
	return auuo
}

// SetExpiresAt sets the "expires_at" field.
func (auuo *AuthUserUpdateOne) SetExpiresAt(t time.Time) *AuthUserUpdateOne {
	auuo.mutation.SetExpiresAt(t)
	return auuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableExpiresAt(t *time.Time) *AuthUserUpdateOne {
	if t != nil {
		auuo.SetExpiresAt(*t)
	}
	return auuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (auuo *AuthUserUpdateOne) ClearExpiresAt() *AuthUserUpdateOne {
	auuo.mutation.ClearExpiresAt()
	return auuo
}

// SetScope sets the "scope" field.
func (auuo *AuthUserUpdateOne) SetScope(s string) *AuthUserUpdateOne {
	auuo.mutation.SetScope(s)
	return auuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (auuo *AuthUserUpdateOne) SetNillableScope(s *string) *AuthUserUpdateOne {
	if s != nil {
		auuo.SetScope(*s)
	}
	return auuo
}

// ClearScope clears the value of the "scope" field.
func (auuo *AuthUserUpdateOne) ClearScope() *AuthUserUpdateOne {
	auuo.mutation.ClearScope()
	return auuo
}

// SetRawProfile sets the "raw_profile" field.
func (auuo *AuthUserUpdateOne) SetRawProfile(m map[string]interface{}) *AuthUserUpdateOne {
	auuo.mutation.SetRawProfile(m)
	return auuo
}

// ClearRawProfile clears the value of the "raw_profile" field.
func (auuo *AuthUserUpdateOne) ClearRawProfile() *AuthUserUpdateOne {
	auuo.mutation.ClearRawProfile()
	return auuo
}

// SetProvider sets the "provider" edge to the AuthProvider entity.
func (auuo *AuthUserUpdateOne) SetProvider(a *AuthProvider) *AuthUserUpdateOne {
	return auuo.SetProviderID(a.ID)
}

// Mutation returns the AuthUserMutation object of the builder.
func (auuo *AuthUserUpdateOne) Mutation() *AuthUserMutation {
	return auuo.mutation
}

// ClearProvider clears the "provider" edge to the AuthProvider entity.
func (auuo *AuthUserUpdateOne) ClearProvider() *AuthUserUpdateOne {
	auuo.mutation.ClearProvider()
	return auuo
}

// Where appends a list predicates to the AuthUserUpdate builder.
func (auuo *AuthUserUpdateOne) Where(ps ...predicate.AuthUser) *AuthUserUpdateOne {
	auuo.mutation.Where(ps...)
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AuthUserUpdateOne) Select(field string, fields ...string) *AuthUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AuthUser entity.
func (auuo *AuthUserUpdateOne) Save(ctx context.Context) (*AuthUser, error) {
	auuo.defaults()
	return withHooks(ctx, auuo.sqlSave, auuo.mutation, auuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AuthUserUpdateOne) SaveX(ctx context.Context) *AuthUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AuthUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AuthUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auuo *AuthUserUpdateOne) defaults() {
	if _, ok := auuo.mutation.UpdatedAt(); !ok {
		v := authuser.UpdateDefaultUpdatedAt()
		auuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auuo *AuthUserUpdateOne) check() error {
	if v, ok := auuo.mutation.CreatedBy(); ok {
		if err := authuser.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.created_by": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.UpdatedBy(); ok {
		if err := authuser.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.updated_by": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.DeletedBy(); ok {
		if err := authuser.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "deleted_by", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.deleted_by": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.ProviderUserID(); ok {
		if err := authuser.ProviderUserIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_user_id", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.provider_user_id": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.TeamID(); ok {
		if err := authuser.TeamIDValidator(v); err != nil {
			return &ValidationError{Name: "team_id", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.team_id": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.Name(); ok {
		if err := authuser.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.name": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.RealName(); ok {
		if err := authuser.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.real_name": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.Email(); ok {
		if err := authuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.email": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.AccessToken(); ok {
		if err := authuser.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.access_token": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.TokenType(); ok {
		if err := authuser.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`entgen: validator failed for field "AuthUser.token_type": %w`, err)}
		}
	}
	if auuo.mutation.ProviderCleared() && len(auuo.mutation.ProviderIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "AuthUser.provider"`)
	}
	return nil
}

func (auuo *AuthUserUpdateOne) sqlSave(ctx context.Context) (_node *AuthUser, err error) {
	if err := auuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authuser.Table, authuser.Columns, sqlgraph.NewFieldSpec(authuser.FieldID, field.TypeString))
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "AuthUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authuser.FieldID)
		for _, f := range fields {
			if !authuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != authuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.UpdatedAt(); ok {
		_spec.SetField(authuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auuo.mutation.DeletedAt(); ok {
		_spec.SetField(authuser.FieldDeletedAt, field.TypeTime, value)
	}
	if auuo.mutation.DeletedAtCleared() {
		_spec.ClearField(authuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auuo.mutation.CreatedBy(); ok {
		_spec.SetField(authuser.FieldCreatedBy, field.TypeString, value)
	}
	if auuo.mutation.CreatedByCleared() {
		_spec.ClearField(authuser.FieldCreatedBy, field.TypeString)
	}
	if value, ok := auuo.mutation.UpdatedBy(); ok {
		_spec.SetField(authuser.FieldUpdatedBy, field.TypeString, value)
	}
	if auuo.mutation.UpdatedByCleared() {
		_spec.ClearField(authuser.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := auuo.mutation.DeletedBy(); ok {
		_spec.SetField(authuser.FieldDeletedBy, field.TypeString, value)
	}
	if auuo.mutation.DeletedByCleared() {
		_spec.ClearField(authuser.FieldDeletedBy, field.TypeString)
	}
	if value, ok := auuo.mutation.UserAgent(); ok {
		_spec.SetField(authuser.FieldUserAgent, field.TypeString, value)
	}
	if auuo.mutation.UserAgentCleared() {
		_spec.ClearField(authuser.FieldUserAgent, field.TypeString)
	}
	if value, ok := auuo.mutation.IPAddress(); ok {
		_spec.SetField(authuser.FieldIPAddress, field.TypeString, value)
	}
	if auuo.mutation.IPAddressCleared() {
		_spec.ClearField(authuser.FieldIPAddress, field.TypeString)
	}
	if value, ok := auuo.mutation.ProviderUserID(); ok {
		_spec.SetField(authuser.FieldProviderUserID, field.TypeString, value)
	}
	if value, ok := auuo.mutation.TeamID(); ok {
		_spec.SetField(authuser.FieldTeamID, field.TypeString, value)
	}
	if auuo.mutation.TeamIDCleared() {
		_spec.ClearField(authuser.FieldTeamID, field.TypeString)
	}
	if value, ok := auuo.mutation.Name(); ok {
		_spec.SetField(authuser.FieldName, field.TypeString, value)
	}
	if auuo.mutation.NameCleared() {
		_spec.ClearField(authuser.FieldName, field.TypeString)
	}
	if value, ok := auuo.mutation.RealName(); ok {
		_spec.SetField(authuser.FieldRealName, field.TypeString, value)
	}
	if auuo.mutation.RealNameCleared() {
		_spec.ClearField(authuser.FieldRealName, field.TypeString)
	}
	if value, ok := auuo.mutation.Email(); ok {
		_spec.SetField(authuser.FieldEmail, field.TypeString, value)
	}
	if auuo.mutation.EmailCleared() {
		_spec.ClearField(authuser.FieldEmail, field.TypeString)
	}
	if value, ok := auuo.mutation.AccessToken(); ok {
		_spec.SetField(authuser.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := auuo.mutation.RefreshToken(); ok {
		_spec.SetField(authuser.FieldRefreshToken, field.TypeString, value)
	}
	if auuo.mutation.RefreshTokenCleared() {
		_spec.ClearField(authuser.FieldRefreshToken, field.TypeString)
	}
	if value, ok := auuo.mutation.TokenType(); ok {
		_spec.SetField(authuser.FieldTokenType, field.TypeString, value)
	}
	if auuo.mutation.TokenTypeCleared() {
		_spec.ClearField(authuser.FieldTokenType, field.TypeString)
	}
	if value, ok := auuo.mutation.ExpiresAt(); ok {
		_spec.SetField(authuser.FieldExpiresAt, field.TypeTime, value)
	}
	if auuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(authuser.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := auuo.mutation.Scope(); ok {
		_spec.SetField(authuser.FieldScope, field.TypeString, value)
	}
	if auuo.mutation.ScopeCleared() {
		_spec.ClearField(authuser.FieldScope, field.TypeString)
	}
	if value, ok := auuo.mutation.RawProfile(); ok {
		_spec.SetField(authuser.FieldRawProfile, field.TypeJSON, value)
	}
	if auuo.mutation.RawProfileCleared() {
		_spec.ClearField(authuser.FieldRawProfile, field.TypeJSON)
	}
	if auuo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authuser.ProviderTable,
			Columns: []string{authuser.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authprovider.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authuser.ProviderTable,
			Columns: []string{authuser.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authprovider.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auuo.mutation.done = true
	return _node, nil
}
