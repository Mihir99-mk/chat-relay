// Code generated by ent, DO NOT EDIT.

package authuser

import (
	"auth/ent/entgen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldDeletedBy, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldUserAgent, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldIPAddress, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v int) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldProviderID, v))
}

// ProviderUserID applies equality check predicate on the "provider_user_id" field. It's identical to ProviderUserIDEQ.
func ProviderUserID(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldProviderUserID, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldTeamID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldName, v))
}

// RealName applies equality check predicate on the "real_name" field. It's identical to RealNameEQ.
func RealName(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldRealName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldEmail, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldRefreshToken, v))
}

// TokenType applies equality check predicate on the "token_type" field. It's identical to TokenTypeEQ.
func TokenType(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldTokenType, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldExpiresAt, v))
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldScope, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldDeletedBy, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldUserAgent, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldIPAddress, v))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v int) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v int) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...int) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...int) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderUserIDEQ applies the EQ predicate on the "provider_user_id" field.
func ProviderUserIDEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldProviderUserID, v))
}

// ProviderUserIDNEQ applies the NEQ predicate on the "provider_user_id" field.
func ProviderUserIDNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldProviderUserID, v))
}

// ProviderUserIDIn applies the In predicate on the "provider_user_id" field.
func ProviderUserIDIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldProviderUserID, vs...))
}

// ProviderUserIDNotIn applies the NotIn predicate on the "provider_user_id" field.
func ProviderUserIDNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldProviderUserID, vs...))
}

// ProviderUserIDGT applies the GT predicate on the "provider_user_id" field.
func ProviderUserIDGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldProviderUserID, v))
}

// ProviderUserIDGTE applies the GTE predicate on the "provider_user_id" field.
func ProviderUserIDGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldProviderUserID, v))
}

// ProviderUserIDLT applies the LT predicate on the "provider_user_id" field.
func ProviderUserIDLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldProviderUserID, v))
}

// ProviderUserIDLTE applies the LTE predicate on the "provider_user_id" field.
func ProviderUserIDLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldProviderUserID, v))
}

// ProviderUserIDContains applies the Contains predicate on the "provider_user_id" field.
func ProviderUserIDContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldProviderUserID, v))
}

// ProviderUserIDHasPrefix applies the HasPrefix predicate on the "provider_user_id" field.
func ProviderUserIDHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldProviderUserID, v))
}

// ProviderUserIDHasSuffix applies the HasSuffix predicate on the "provider_user_id" field.
func ProviderUserIDHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldProviderUserID, v))
}

// ProviderUserIDEqualFold applies the EqualFold predicate on the "provider_user_id" field.
func ProviderUserIDEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldProviderUserID, v))
}

// ProviderUserIDContainsFold applies the ContainsFold predicate on the "provider_user_id" field.
func ProviderUserIDContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldProviderUserID, v))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldTeamID, vs...))
}

// TeamIDGT applies the GT predicate on the "team_id" field.
func TeamIDGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldTeamID, v))
}

// TeamIDGTE applies the GTE predicate on the "team_id" field.
func TeamIDGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldTeamID, v))
}

// TeamIDLT applies the LT predicate on the "team_id" field.
func TeamIDLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldTeamID, v))
}

// TeamIDLTE applies the LTE predicate on the "team_id" field.
func TeamIDLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldTeamID, v))
}

// TeamIDContains applies the Contains predicate on the "team_id" field.
func TeamIDContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldTeamID, v))
}

// TeamIDHasPrefix applies the HasPrefix predicate on the "team_id" field.
func TeamIDHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldTeamID, v))
}

// TeamIDHasSuffix applies the HasSuffix predicate on the "team_id" field.
func TeamIDHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldTeamID, v))
}

// TeamIDIsNil applies the IsNil predicate on the "team_id" field.
func TeamIDIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldTeamID))
}

// TeamIDNotNil applies the NotNil predicate on the "team_id" field.
func TeamIDNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldTeamID))
}

// TeamIDEqualFold applies the EqualFold predicate on the "team_id" field.
func TeamIDEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldTeamID, v))
}

// TeamIDContainsFold applies the ContainsFold predicate on the "team_id" field.
func TeamIDContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldTeamID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldName, v))
}

// RealNameEQ applies the EQ predicate on the "real_name" field.
func RealNameEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldRealName, v))
}

// RealNameNEQ applies the NEQ predicate on the "real_name" field.
func RealNameNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldRealName, v))
}

// RealNameIn applies the In predicate on the "real_name" field.
func RealNameIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldRealName, vs...))
}

// RealNameNotIn applies the NotIn predicate on the "real_name" field.
func RealNameNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldRealName, vs...))
}

// RealNameGT applies the GT predicate on the "real_name" field.
func RealNameGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldRealName, v))
}

// RealNameGTE applies the GTE predicate on the "real_name" field.
func RealNameGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldRealName, v))
}

// RealNameLT applies the LT predicate on the "real_name" field.
func RealNameLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldRealName, v))
}

// RealNameLTE applies the LTE predicate on the "real_name" field.
func RealNameLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldRealName, v))
}

// RealNameContains applies the Contains predicate on the "real_name" field.
func RealNameContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldRealName, v))
}

// RealNameHasPrefix applies the HasPrefix predicate on the "real_name" field.
func RealNameHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldRealName, v))
}

// RealNameHasSuffix applies the HasSuffix predicate on the "real_name" field.
func RealNameHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldRealName, v))
}

// RealNameIsNil applies the IsNil predicate on the "real_name" field.
func RealNameIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldRealName))
}

// RealNameNotNil applies the NotNil predicate on the "real_name" field.
func RealNameNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldRealName))
}

// RealNameEqualFold applies the EqualFold predicate on the "real_name" field.
func RealNameEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldRealName, v))
}

// RealNameContainsFold applies the ContainsFold predicate on the "real_name" field.
func RealNameContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldRealName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldEmail, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldRefreshToken, v))
}

// TokenTypeEQ applies the EQ predicate on the "token_type" field.
func TokenTypeEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldTokenType, v))
}

// TokenTypeNEQ applies the NEQ predicate on the "token_type" field.
func TokenTypeNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldTokenType, v))
}

// TokenTypeIn applies the In predicate on the "token_type" field.
func TokenTypeIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldTokenType, vs...))
}

// TokenTypeNotIn applies the NotIn predicate on the "token_type" field.
func TokenTypeNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldTokenType, vs...))
}

// TokenTypeGT applies the GT predicate on the "token_type" field.
func TokenTypeGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldTokenType, v))
}

// TokenTypeGTE applies the GTE predicate on the "token_type" field.
func TokenTypeGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldTokenType, v))
}

// TokenTypeLT applies the LT predicate on the "token_type" field.
func TokenTypeLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldTokenType, v))
}

// TokenTypeLTE applies the LTE predicate on the "token_type" field.
func TokenTypeLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldTokenType, v))
}

// TokenTypeContains applies the Contains predicate on the "token_type" field.
func TokenTypeContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldTokenType, v))
}

// TokenTypeHasPrefix applies the HasPrefix predicate on the "token_type" field.
func TokenTypeHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldTokenType, v))
}

// TokenTypeHasSuffix applies the HasSuffix predicate on the "token_type" field.
func TokenTypeHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldTokenType, v))
}

// TokenTypeIsNil applies the IsNil predicate on the "token_type" field.
func TokenTypeIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldTokenType))
}

// TokenTypeNotNil applies the NotNil predicate on the "token_type" field.
func TokenTypeNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldTokenType))
}

// TokenTypeEqualFold applies the EqualFold predicate on the "token_type" field.
func TokenTypeEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldTokenType, v))
}

// TokenTypeContainsFold applies the ContainsFold predicate on the "token_type" field.
func TokenTypeContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldTokenType, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldExpiresAt))
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEQ(FieldScope, v))
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNEQ(FieldScope, v))
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIn(FieldScope, vs...))
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotIn(FieldScope, vs...))
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGT(FieldScope, v))
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldGTE(FieldScope, v))
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLT(FieldScope, v))
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldLTE(FieldScope, v))
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContains(FieldScope, v))
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasPrefix(FieldScope, v))
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldHasSuffix(FieldScope, v))
}

// ScopeIsNil applies the IsNil predicate on the "scope" field.
func ScopeIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldScope))
}

// ScopeNotNil applies the NotNil predicate on the "scope" field.
func ScopeNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldScope))
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldEqualFold(FieldScope, v))
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.AuthUser {
	return predicate.AuthUser(sql.FieldContainsFold(FieldScope, v))
}

// RawProfileIsNil applies the IsNil predicate on the "raw_profile" field.
func RawProfileIsNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldIsNull(FieldRawProfile))
}

// RawProfileNotNil applies the NotNil predicate on the "raw_profile" field.
func RawProfileNotNil() predicate.AuthUser {
	return predicate.AuthUser(sql.FieldNotNull(FieldRawProfile))
}

// HasProvider applies the HasEdge predicate on the "provider" edge.
func HasProvider() predicate.AuthUser {
	return predicate.AuthUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderWith applies the HasEdge predicate on the "provider" edge with a given conditions (other predicates).
func HasProviderWith(preds ...predicate.AuthProvider) predicate.AuthUser {
	return predicate.AuthUser(func(s *sql.Selector) {
		step := newProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthUser) predicate.AuthUser {
	return predicate.AuthUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthUser) predicate.AuthUser {
	return predicate.AuthUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthUser) predicate.AuthUser {
	return predicate.AuthUser(sql.NotPredicates(p))
}
