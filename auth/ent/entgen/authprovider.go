// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"auth/ent/entgen/authprovider"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AuthProvider is the model entity for the AuthProvider schema.
type AuthProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy *string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent *string `json:"user_agent,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress *string `json:"ip_address,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName *string `json:"display_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthProviderQuery when eager-loading is set.
	Edges        AuthProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthProviderEdges holds the relations/edges for other nodes in the graph.
type AuthProviderEdges struct {
	// Users holds the value of the users edge.
	Users []*AuthUser `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AuthProviderEdges) UsersOrErr() ([]*AuthUser, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authprovider.FieldID:
			values[i] = new(sql.NullInt64)
		case authprovider.FieldCreatedBy, authprovider.FieldUpdatedBy, authprovider.FieldDeletedBy, authprovider.FieldUserAgent, authprovider.FieldIPAddress, authprovider.FieldName, authprovider.FieldDisplayName:
			values[i] = new(sql.NullString)
		case authprovider.FieldCreatedAt, authprovider.FieldUpdatedAt, authprovider.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthProvider fields.
func (ap *AuthProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = int(value.Int64)
		case authprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ap.CreatedAt = value.Time
			}
		case authprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ap.UpdatedAt = value.Time
			}
		case authprovider.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ap.DeletedAt = new(time.Time)
				*ap.DeletedAt = value.Time
			}
		case authprovider.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ap.CreatedBy = new(string)
				*ap.CreatedBy = value.String
			}
		case authprovider.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ap.UpdatedBy = new(string)
				*ap.UpdatedBy = value.String
			}
		case authprovider.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ap.DeletedBy = new(string)
				*ap.DeletedBy = value.String
			}
		case authprovider.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				ap.UserAgent = new(string)
				*ap.UserAgent = value.String
			}
		case authprovider.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				ap.IPAddress = new(string)
				*ap.IPAddress = value.String
			}
		case authprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ap.Name = value.String
			}
		case authprovider.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				ap.DisplayName = new(string)
				*ap.DisplayName = value.String
			}
		default:
			ap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthProvider.
// This includes values selected through modifiers, order, etc.
func (ap *AuthProvider) Value(name string) (ent.Value, error) {
	return ap.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the AuthProvider entity.
func (ap *AuthProvider) QueryUsers() *AuthUserQuery {
	return NewAuthProviderClient(ap.config).QueryUsers(ap)
}

// Update returns a builder for updating this AuthProvider.
// Note that you need to call AuthProvider.Unwrap() before calling this method if this AuthProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AuthProvider) Update() *AuthProviderUpdateOne {
	return NewAuthProviderClient(ap.config).UpdateOne(ap)
}

// Unwrap unwraps the AuthProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AuthProvider) Unwrap() *AuthProvider {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("entgen: AuthProvider is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AuthProvider) String() string {
	var builder strings.Builder
	builder.WriteString("AuthProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ap.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ap.CreatedBy; v != nil {
		builder.WriteString("created_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ap.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ap.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ap.UserAgent; v != nil {
		builder.WriteString("user_agent=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ap.IPAddress; v != nil {
		builder.WriteString("ip_address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ap.Name)
	builder.WriteString(", ")
	if v := ap.DisplayName; v != nil {
		builder.WriteString("display_name=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// AuthProviders is a parsable slice of AuthProvider.
type AuthProviders []*AuthProvider
